var _MSG_INTRODUCTION    = "MSG_Action_Introduction";


/* SYSTEM MESSAGES */
var _MSG_SPEECH_BEGIN			= "speech_started";
var _MSG_SPEECH_END 			= "speech_ended";
var _MSG_RAYCAST 				= "MSG_intersected_objects";
var _MSG_MOUSE_PRESS			= "MSG_mouse_press";
var _MSG_MOUSE_RELEASE			= "MSG_mouse_release";
var _MSG_MOUSE_HOVER			= "MSG_mouse_hover_object";

var WebRocketApplication = IApplication.$extend(
{
    __init__ : function()
    {
// NOT USED  -- LOADING .JSON OBJECT
/* 		url = './localAssets/soapbox_foothold.json';

		loader.load(url, function(geometry, materials){
		
			var material = new THREE.MeshBasicMaterial(materials);
			var soapHolderMesh = new THREE.Mesh(geometry, material);
			itself.soapHolderMesh = soapHolderMesh;
			soapHolderMesh.name = "soap_holder";
			soapHolderMesh.position.x = 66.21;
			soapHolderMesh.position.y = 9.59;
			soapHolderMesh.position.z = -44;
			itself.threeGroup.add(soapHolderMesh);
		}); */
		
		// load scripts for middleware connection

		
		console.log(Physijs);

		
		var self = this;
        this.$super("soapbox_virtual");
		console.log("client connected");
		// user id
		var userId = Tundra.client.loginProperties.username;
		this.userId = userId;
		var speech_info = {name : this.userId};
		console.log(speech_info);

		this.initUi(self);
		
		var onRenderFctsWithoutParam = [];
		var onRenderFctsWithParams = [];
		var listOfMeshObject = [];
		var listOfThreeGroup = [];
		var raycastData;
		
		// create obj for middleware
		var soapbox = new Soapbox();
		this.soapbox = soapbox;
		console.log(this.soapbox);
		

		/* Tundra entities */
		var foothold = Tundra.scene.entityByName("soapbox_footbold");
		this.foothold = foothold;

		var video = document.createElement('video');
		this.video = video;

		this.video.width = 320;
		this.video.height = 240;
		this.video.autoplay = false;
		this.video.loop = true;

		/* THREE */
		var videoTexture = new THREE.Texture(this.video);
		this.videoTexture = videoTexture;
		var context	= this.getAudioContext();
		this.context = context;

		var threeMeshGroup = new THREE.Object3D();
		this.threeMeshGroup = threeMeshGroup;
		
		console.log(this.videoTexture);
		console.log(this.context);
		
		
		//--have to look later 20/10/2015
/* 		this.videoTexture.addEventListener('play', function(event)
		{
			// create a source node from the mediaElement
			var sourceNode	= this.context.createMediaElementSource(this.videoTexture.image);
			// connect it to WebAudio API
			sourceNode.connect(this.context.destination);
			console.log(sourceNode);
			
		}, function(error){
			consosle.log("get audio failed");
		}); */
		//////////////////
		console.log(this.videoTexture);
		
		////////////////////////////////////
		//* create objects for the scene *//
		////////////////////////////////////
		
		var url = []; // path for texture
		var objPosition = [];
		var geo = [];
		
		objPosition = [60.21,9.59,-44.35];
		geo = [4, 4, 4];
		var screenMesh = this.createCubeObj(this.videoTexture, "video_screen", objPosition, geo);
		
		objPosition = [63.20,8.00,-46.36];
		url = './localAssets/vote.jpg'; 
		geo = [1, 1, 1];
		var btnMesh = this.createBtnObj(url, "button1", objPosition, geo); // create button1
		
		url = './localAssets/vote2.jpg'; 	
		objPosition = [63.20,8.00,-42.36];
		var btnMesh_2 = this.createBtnObj(url, "button2", objPosition, geo); // button2
		console.log(btnMesh, screenMesh);

		// to change texture's emissive attribute
		var hex1 = this.threeMeshGroup.children[1].material.emissive.getHex();
		this.hex1 = hex1;
		var hex2 = this.threeMeshGroup.children[2].material.emissive.getHex();
		this.hex2 = hex2;
		// add objects to the three.scene
		Tundra.renderer.scene.add(this.threeMeshGroup);
		console.log(this.threeMeshGroup);


        ////* Listeners *////
		// entity event listeners
        this.entity.onEntityAction(this, this.onEntityAction);
		this.foothold.onEntityAction(this, this.onEntityAction);
		
		// mouse event listeners
		var mouseEvents = Tundra.input.onMouseEvent(this, this.onMouseEvent); // function(context, callback) 
		console.log(Tundra.renderer);		
		Tundra.events.subscribe(_MSG_MOUSE_PRESS, this, this.onMousePress); 
		Tundra.events.subscribe(_MSG_MOUSE_RELEASE, this, this.onMouseRelease);
		Tundra.events.subscribe(_MSG_MOUSE_HOVER, this, this.onMouseHoverObj);

        // Introduce client app to the server
        this.entity.exec(EntityAction.Server, _MSG_INTRODUCTION);

		console.log(Tundra.client);
		
		
		// get video stream
/* 		if(this.getVideoStream(this, this.video))
			this.video = this.getVideoStream(this, this.video);
		else
			console.log("Loading video failed"); */

		// connect to middleware
		//this.connToMiddleware(this);
		
		
		/**************get video stream*******************/
		//https://github.com/jeromeetienne/threex.videotexture/blob/master/examples/videotexture.html
		var videoStreamToSend;

		//chrome
		if(navigator.webkitGetUserMedia)
		{
			navigator.webkitGetUserMedia(
			{
				video:true,
				audio:true
			},
			function(stream)
			{
				videoStreamToSend = stream;
				video.src = URL.createObjectURL(stream);
				//self.video = video;
			},
			function(error)
			{
				alert('you have got no WebRTC webcam');
			});
		// firefox
		}else if(navigator.mozGetUserMedia)
		{
			navigator.mozGetUserMedia({
				video:true,
				audio:true
			},
			function(stream)
			{
				videoStreamToSend = stream;
				video.src = URL.createObjectURL(stream);
				//self.video = video;
			},
			function(error)
			{
				alert('you have got no WebRTC webcam');
			});
		}else
			console.assert(false)
		/*******************************************/

		
		/***********connect to middleware******************/
		stomp = soapbox.connect(function()
		{
			soapbox.submit({"lefttime": "17/10/2015 12:00", "name": "Jilin",
                        "topic": "Today is hot!", "password": 1234});
			soapbox.start(videoStreamToSend);

			soapbox.register();
		}, function(error)
		{
			console.log("attempt to connect to middleware has failed");
		});		
		/**************************************************/
		
		// stop soapbox 
		window.onbeforeunload = function(event) {
			soapbox.stop();
        };

		/* functions to be rendered in a loop */		
		onRenderFctsWithoutParam.push(function()
		{
			self.videoTextureUpdate(); 	// this => window
		});
		
		onRenderFctsWithoutParam.push(function()
		{
			self.raycastData = self.rayCast();				// this => window					
		
		});
		tex = THREE.ImageUtils.loadTexture("./localAssets/like.jpg");
		console.log(tex);
		///////////////////////////////////////////////////////


		console.log(this.foothold, Tundra.scene);
		console.log(Tundra.renderer);
/* 		var newScene = Tundra.renderer.scene.clone(new Physijs.Scene);
		Tundra.renderer.scene = newScene;
		console.log(Tundra.renderer); */

		
		listOfMeshObject = this.getListOfMeshObj();
		this.listOfMeshObject = listOfMeshObject;

/* 		listOfThreeGroup = this.getListOfObj3D();
		this.listOfThreeGroup = listOfThreeGroup; */
		
		console.log(Tundra.input);

		// loop for video render etc.
		requestAnimationFrame(function animation()
		{
			if(onRenderFctsWithoutParam.length !== 0)
			{
				onRenderFctsWithoutParam.forEach(function(onRenderFctsWithoutParam)
				{
					onRenderFctsWithoutParam();
				});
			}
			if(onRenderFctsWithParams.length !== 0)
			{
				onRenderFctsWithParams.forEach(function(onRenderFctsWithParams)
				{
					if(onRenderFctsWithParams.length === 1)
						onRenderFctsWithParams();
					else if(onRenderFctsWithParams.length === 2)
						onRenderFctsWithParams();
					else if(onRenderFctsWithParams.length === 3)
						onRenderFctsWithParams();
				});
			}
			requestAnimationFrame(animation);
		})
		
	
    },

	///////////////////////////////////////////
	//*  this.methods in alphabetical order *//
	///////////////////////////////////////////

	createBtnObj : function(url, name, initPosition, geo)
	{
		console.log(url);
		if(!url){
			console.log("error, no url of texture for the obj");
			return;
		}else if(typeof name == 'undefined'){
			console.log("this obj has given no name");
			var name = '';
		}else if(typeof initPosition == 'undefined'){
			console.log("warning, initial coordinate has not given, will be set as default value: 55, 9, -44");
			var initPosition = [];
		}else if(typeof geo == 'undefined'){
			console.log("warning, initial geometry value has not given, will be set as default value: 2, 2, 2");
			var geo = [];
		}
		
		var btnTexture = THREE.ImageUtils.loadTexture(url, function(error){
			console.log(this,"image not loaded, error");
		});

		var btnMaterial = new THREE.MeshLambertMaterial({map: btnTexture});
		var btnGeometry = new THREE.BoxGeometry(geo[0] ? geo[0] : 2, geo[1] ? geo[1] : 2, geo[2] ? geo[2] : 2);
		var btnMesh = new THREE.Mesh( btnGeometry, btnMaterial );
		
		btnMesh.name = name;
		btnMesh.position.x = initPosition[0] ? initPosition[0] : 55;
		btnMesh.position.y = initPosition[1] ? initPosition[1] : 9;
		btnMesh.position.z = initPosition[2] ? initPosition[2] : -44;
		console.log(btnMesh);
		this.threeMeshGroup.add(btnMesh);
		
		return btnMesh;

	},
	
	createCubeObj : function(texture, name, initPosition, geo)
	{
		console.log(texture);
		if(!texture){
			console.log("error, no url of texture for the obj");
			return false;
		}else if(typeof texture == 'string'){
			var texture = THREE.ImageUtils.loadTexture(texture, function(error){
				console.log(this,"image not loaded, error");
			});
		}
		
		if(typeof name == 'undefined'){
			console.log("this obj has given no name");
			var name = "";
		}else if(typeof initPosition == 'undefined'){
			console.log("warning, initial coordinate has not given, will be set as default value: 55, 9, -44");
			var initPosition = [];
		}else if(typeof geo == 'undefined'){
			console.log("warning, initial geometry value has not given, will be set as default value: 2, 2, 2");
			var geo = [];
		}

		var geometry = new THREE.BoxGeometry(geo[0] ? geo[0] : 2, geo[1] ? geo[1] : 2, geo[2] ? geo[2] : 2);
		console.log(texture);
		var material = new THREE.MeshLambertMaterial({ map: texture});
		var cubeMesh = new THREE.Mesh(geometry, material);	
		
		cubeMesh.name = name;
		cubeMesh.position.x = initPosition[0] ? initPosition[0] : 55;
		cubeMesh.position.y = initPosition[1] ? initPosition[1] : 9;
		cubeMesh.position.z = initPosition[2] ? initPosition[2] : -44;

		this.threeMeshGroup.add(cubeMesh);
		
		return cubeMesh;
	},
	
	getAudioContext : function()
	{ //-- http://srchea.com/experimenting-with-web-audio-api-three-js-webgl
		try {
			if(typeof webkitAudioContext === 'function') { // webkit-based
				var context = new webkitAudioContext();
			}
			else { // other browsers that support AudioContext
				var context = new AudioContext();
			}
		}
		catch(e) {
			// Web Audio API is not supported in this browser
			alert("Web Audio API is not supported in this browser");
		}
		if(context)
			return context;
		else
			return false;
	},
	
	getListOfMeshObj : function()
	{
		var arr = [];
		Tundra.renderer.scene.traverse(function(object)
		{
			if(object instanceof THREE.Mesh)
				arr.push(object);
		}, function(error)
		{
			console.log("getting list of object failed");
		});
		console.log(arr);
		if(arr.length !== 0)
			return arr;
		else
			return false;

		
	},
	
	getListOfObj3D : function()
	{
		var arr = [];
		Tundra.renderer.scene.traverse(function(object)
		{
			if(object instanceof THREE.Object3D)
				arr.push(object);
		}, function(error)
		{
			console.log("getting list of object failed");
		});
		if(arr.length !== 0)
			return arr;
		else
			return false;
		
	},

    initUi : function(self)
    {
        this.ui = {};
        this.ui.baseCSS = {
            "position" : "absolute",
            "padding"  : 25,
            "top" : 25,
            "left" : 25,
            "font-family" : "RobotoDraft, Arial",
            "color" : "white",
            "background-color" : "rgba(8,149,195,0.8)"
        };

        this.ui.welcome = $("<div/>", { text : "Welcome to the 'virtual_test' application" });
        this.ui.welcome.css(this.ui.baseCSS);
        this.ui.welcome.hide();

        this.framework.ui.addWidgetToScene(this.ui.welcome);
        this.ui.welcome.fadeIn(2000);
		
		/*************dashboard UI********************************/
		
		// dashboard
	    var dashboard = document.createElement('dashboard');
		this.dashboard = dashboard;
		this.dashboard.className = "dashboard";
		this.dashboard.id = "dashboard";
        $(this.dashboard).css({
            position: "absolute",
            "background-color" : "black",
            width: "300px",
            height: "100%",
            right: "0px",
			opacity: 0.5,
			filter: "alpha(opacity=50)" /* For IE8 and earlier */
        });
		this.dashboard.style.overflow = "scroll";
		
		document.body.appendChild(this.dashboard);
		
		// comment text input
		var txtInput = document.createElement("input");
		this.txtInput = txtInput;
		$(this.txtInput).css({
		    position: "absolute",
            "background-color" : "white",
            width: "100%",
            height: "30px",
			bottom : "100px"

		});
		this.txtInput.setAttribute("type", "text");
		this.txtInput.className = "commentInput"; // set the CSS class
		this.txtInput.id = "commentInput"
		this.dashboard.appendChild(this.txtInput); // put it into the DOM
		
		// send comment button
		var sendCommBtn = document.createElement("button");
		var txt = document.createTextNode("send comment");
		this.sendCommBtn = sendCommBtn;
		
		// comment sent triggered
		$(this.sendCommBtn).click(function(){
			var v = document.getElementById("commentInput");
			console.log(v.value);
			v.value == "";
		});
		
		this.sendCommBtn.appendChild(txt);
		this.sendCommBtn.setAttribute("type", "button");
		this.sendCommBtn.className = "commentBtn";
		this.sendCommBtn.id = "commentBtn";
		$(this.sendCommBtn).css({
			position : "absolute",
			"background-color" : "white",
			bottom : "55px",
			width: "100px",
			right : "50px"
			
		});
		this.dashboard.appendChild(this.sendCommBtn);
		
		// div for comment area
		var commentDiv = document.createElement("div");
		this.commentDiv = commentDiv;
		this.commentDiv.className = "commentDiv";
		this.commentDiv.id = "commentDiv";
		$(this.commentDiv).css({
			position : "absolute",
			bottom : "150px",
			width : "100%",
			height : "50%",
			background : "green",
			color : "white"		
		});
		this.commentDiv.style.overflow = "scroll";
		
		this.dashboard.appendChild(this.commentDiv);
		
		// inner div for comment area
		var commentInnerDiv = document.createElement("div");
		this.commentInnerDiv = commentInnerDiv;
		this.commentInnerDiv.className = "commentDiv";
		this.commentInnerDiv.id = "commentInnerDiv";
		$(this.commentInnerDiv).css({
			position : "relative",
			top : "5px",
			width : "100%",
			height : "30px",
			color : "white"		
		});
		this.commentInnerDiv.innerHTML = "comment will be shown in this areaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
				
		$(this.commentInnerDiv).mouseover(function(){
			$(self.commentInnerDiv).css("background-color", "red");
		});
		$(this.commentInnerDiv).mouseout(function(){
			$(self.commentInnerDiv).css("background-color", "green");
		});

		
		this.commentDiv.appendChild(this.commentInnerDiv);
		
		//$("dashboard").hide();
		/**********************************************************/
		
    },

    onEntityAction : function(entityAction)
	{
        if(entityAction.name === _MSG_INTRODUCTION)
		{
            this.log.info("Server messaged it is ready");
        }
		else if(entityAction.name === _MSG_SPEECH_BEGIN)
        {
            this.log.info("speech started");
			this.video.play();
        }
		else if(entityAction.name === _MSG_SPEECH_END)
        {
            this.log.info("speech ended");
			this.video.pause();
        }
		// raycast tundra objects
		else if(entityAction.name === _MSG_RAYCAST)
		{
			//TODO

			Tundra.events.send(_MSG_MOUSE_HOVER);
				//console.log(this.raycastData[0].object.name);

			
		}
    },
	
	onMouseEvent : function(event)
	{
		// set live coordinate of the mouse
		var x;
		var y;
		this.x = event.x;
		this.y = event.y;
		//console.log(event);
		
		if(event.type === "press"){
			Tundra.events.send(_MSG_MOUSE_PRESS, event);
		}
		if(event.type === "release"){
			Tundra.events.send(_MSG_MOUSE_RELEASE, event);
		}
	},
	
	onMouseHoverObj : function()
	{
		var hoverObj = this.raycastData;
		
		if(hoverObj == '' || typeof hoverObj == 'undefined'){return;}
		else{
			for(var i=0; i<hoverObj.length; i++){
				if(hoverObj[i].object.name == 'button1'){
					this.threeMeshGroup.children[1].material.emissive.setHex( 0x00ff00 );
					this.threeMeshGroup.children[2].material.emissive.setHex(this.hex2);
					return;
				}else if(hoverObj[i].object.name == 'button2'){
					this.threeMeshGroup.children[2].material.emissive.setHex( 0xff0000 );
					this.threeMeshGroup.children[1].material.emissive.setHex(this.hex1);
					return;
				}
				else{
					this.threeMeshGroup.children[1].material.emissive.setHex(this.hex1);
					this.threeMeshGroup.children[2].material.emissive.setHex(this.hex2);
				}
			}
		}	
	},
	
	onMousePress : function(event) 
	{	
		var objTargetted;	
		console.log(event.type)
		console.log(event);
		objTargetted = this.rayCast();
		
		if(objTargetted)
		{
			for(var i=0; i<objTargetted.length; i++)
			{
				console.log(objTargetted[i].object.name);
				if(objTargetted[i].object.name == 'button1'){
					//$("dashboard").toggle();
					$("dashboard").show();
				}
			}
		}
		//TODO 
	},
	
	onMouseRelease : function(event) 
	{
		console.log(event.type)
		// TODO 
	},
	

	rayCast : function()
	{	
		var rayCastEnt = Tundra.renderer.raycast();
		var threeRaycaster = Tundra.renderer.raycaster;
		var obj = threeRaycaster.intersectObjects(this.listOfMeshObject);
		if(obj)
		{
			this.entity.exec(EntityAction.Local, _MSG_RAYCAST);
			return obj;
		}
		
		return false;
	},

	videoTextureUpdate : function()
	{
		if(this.video.readyState !== this.video.HAVE_ENOUGH_DATA)
			return;
		this.videoTexture.needsUpdate	= true;
	},
	

	// NOT USED
    haejongAsset : function(asset)
	{

		var entity_soapHolder = Tundra.scene.createLocalEntity(["Name", "Mesh", "Placeable"]);
		var entity_hotspot = Tundra.scene.createLocalEntity(["Name", "Mesh", "Placeable"]);
		//var entity_soapbox = Tundra.scene.createLocalEntity(["Name", "Mesh", "Placeable"]);

		entity_soapHolder.name = "soapbox_foothold";
		entity_hotspot.name = "hotpot";
		//entity_soapbox.name = "soapbox";

		entity_soapHolder.mesh.meshRef = "local://soapbox_foothold.mesh";
		entity_soapHolder.mesh.materialRefs = ["local://soapbox_foothold.material"];

		//entity_soapbox.mesh.meshRef = "local://soapbox.mesh";
		//entity_soapbox.mesh.materialRefs = ["local://soapbox.material"];

		entity_hotspot.mesh.meshRef = "local://Cube.001.mesh";
		entity_hotspot.mesh.materialRefs = [
			"local://sides.material",
			"local://front.material",
			"local://back.material"];

		entity_soapHolder.placeable.setPosition(new THREE.Vector3(66.21,9.59,-44));
		entity_soapHolder.placeable.setScale(new THREE.Vector3(1, 1, 1));
		entity_soapHolder.placeable.setRotation(new THREE.Vector3(0, 52, 0));

		//entity_soapbox.placeable.setPosition(new THREE.Vector3(66.20,8.59,-44.36));
		//entity_soapbox.placeable.setScale(new THREE.Vector3(1, 1, 1));
		//entity_soapbox.placeable.setRotation(new THREE.Vector3(0, 52, 0));

		entity_hotspot.placeable.setPosition(new THREE.Vector3(70.2041016,7.68280506,-44.3602066));
		entity_hotspot.placeable.setScale(new THREE.Vector3(1, 1, 1));
		entity_hotspot.placeable.setRotation(new THREE.Vector3(0, 52, 0));
		console.log(entity_soapHolder);

	}



});




// Start the application by instantiating it
var webRocketApplication = new WebRocketApplication();